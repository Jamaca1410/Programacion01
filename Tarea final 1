using System;

namespace Final
{
    // base interface 
    interface IBurger
    {
        string HBurger();
    }
    // concrete implementation
    class BurgerKing : IBurger
    {
        public string HBurger()
        {
            return "Hamburguesa normal.";
        }
    }
    // base decorator
    class BurgerDeco : IBurger
    {
        private readonly IBurger _hambur;
        public BurgerDeco(IBurger hambur)
        {
            _hambur = hambur;
        }
        public virtual string HBurger()
        {
            return _hambur.HBurger();
        }
    }
    // concrete decorator (bacon)
    class BaconDeco : BurgerDeco
    {
        public BaconDeco(IBurger hambur) : base(hambur) { }
        public override string HBurger()
        {
            string type = base.HBurger();
            type += "\r\n BACON EXTRA";
            return type;
        }
    }
    // concrete decorator (cebolla)
    class CeboDeco : BurgerDeco
    {
        public CeboDeco(IBurger hambur) : base(hambur) { }
        public override string HBurger()
        {
            string type = base.HBurger();
            type += "\r\n CEBOLLA EXTRA";
            return type;
        }
    }
    class Program
    {
        static void Main()
        {
            IBurger hamburguesa = new BurgerKing();
            IBurger baconDecorator = new BaconDeco(hamburguesa);
            IBurger ceboDecorator = new CeboDeco(hamburguesa);
            //Primer ingrediente extra
            Console.WriteLine(baconDecorator.HBurger());
            //Segundo ingrediente extra
            Console.WriteLine(ceboDecorator.HBurger());
        }
    }
}
